name: AWS push to ecr
on:
  workflow_dispatch:

env:
  AWS_REGION: "us-east-1"
  ECR_REPO: "shop"
  AWS_ACCOUNT_ID: "533267116580"
  BUCKET_NAME: "onlie-shop-frontend"
  CLOUDFRONT_DISTRIBUTION_ID: "E17Z0ZZ33VWQYV"

permissions:
  id-token: write
  contents: read

jobs:
  BuildAndPushImage:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli

      - name: Install Node.js and npm
        uses: actions/setup-node@v2
        with:
          node-version: '14'    

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.4
          terraform_wrapper: false
          
      - name: Build Docker image
        run: |
          cd DemoAppShop
          docker build -t shop .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::533267116580:role/ci-cd-pipeline
          role-session-name: ecrPushImage
          aws-region: ${{ env.AWS_REGION }}

      - name: Log into Amazon ECR
        run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      - name: Tag Docker image
        run: |
          docker tag shop:latest ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}:${GITHUB_SHA}

      - name: Push Docker image to Amazon ECR
        run: |
          docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}:${GITHUB_SHA}
      
      - name: Deploy Infrastructure with Terraform
        run: |
          cd infrastructure
          terraform init
          terraform apply -auto-approve -var "image_tag=${GITHUB_SHA}"

      - name: Build UI
        working-directory: DemoAppShop/ui
        run: |
          npm install
          npm run build
          
      - name: Upload UI assets to S3
        working-directory: DemoAppShop/ui
        run: |
          aws s3 sync build s3://${{ env.BUCKET_NAME }}

      - name: Create CloudFront invalidation
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} --paths '/*'

